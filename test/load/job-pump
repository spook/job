#!/usr/bin/perl -w
#   LGPL 2.1+
#
#   job - the Linux Batch Facility
#   (c) Copyright 2014-2016 Hewlett Packard Enterprise Development LP
#   Created by Uncle Spook <spook(at)MisfitMountain(dot)org>
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with this library; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
#   USA

use v5.10.0;
use strict;
use warnings;

# TODO:
#   Randomize the priority.
#   Randomize the submitter.
#   In the fake job, have an option that loads up network traffic to someplace.

use FindBin qw($Bin);
use Getopt::Long qw(:config no_ignore_case bundling);
use Pod::Usage;
use Time::HiRes qw(gettimeofday tv_interval);

$| = 1;
#<<<
my $opts = {};
GetOptions($opts, "help|h",
                  "nojobman|M",
                  "queue|q=s",
                  "root|R=s",
                  "verbose|v",
                  "script|k",

                  "duration|d=s",
                  "initial|i=i",
                  "jrate|j=i",
                  "jrvary|J=i",
                  "grate|g=i",
                  "gsize|G=i",
                  "grvary=i",
                  "gsvary=i",

                  "srate|s=i",
                  "sfail|S=i",
                  "stime|t=i",
                  "svary|T=i",
) or pod2usage(2);
pod2usage(1) if $opts->{help};
#>>>

# Inits
my $queue    = $opts->{queue}    || "batch";
my $duration = $opts->{duration} || "3d";    # how long to run
my $initial  = $opts->{initial}  // 100;     # jobs
my $jrate    = $opts->{jrate}    || 1440;    # jobs/day
my $jrvary   = $opts->{jrvary}   || 10;      # percent
my $grate    = $opts->{grate}    || 5;       # jobs/day
my $gsize    = $opts->{gsize}    || 1000;    # jobs
my $grvary   = $opts->{grvary}   || 10;      # percent
my $gsvary   = $opts->{gsvary}   || 10;      # percent
my $srate    = $opts->{srate}    || 90;      # percent
my $sfail    = $opts->{sfail}    || 20;      # percent
my $stime    = $opts->{stime}    || 60;      # seconds
my $svary    = $opts->{svary}    || 80;      # percent

my $ROOT   = $opts->{root} || "/";
my $MKJOB  = "$ROOT/usr/bin/mkjob  -R $ROOT";
my $JOBMAN = "$ROOT/usr/bin/jobman -R $ROOT";

$jrate = 1 if $jrate < 1;
$grate = 1 if $grate < 1;

if ($opts->{"verbose"}) {
    say "     Dur:  $duration";
    say "     Root: $ROOT";
    say "";
}

exit be_the_script() if $opts->{"script"};

# Create initial jobs
my $script = "$0 --script --srate $srate --sfail $sfail --stime $stime --svary $svary";
for my $i (1 .. $initial) {
    my $pri = plus_minus(5, 85);    # 1-9
    my $t0 = [gettimeofday];
    my $cmd = qq{$MKJOB -q $queue -p $pri $script};
    system($cmd);
    my $td = sprintf("%.3f", tv_interval($t0));
    say "submitted initial single job in $td sec";
}

# Now start adding them at the desired rates
my $done_when   = time() + to_secs($duration);
my $next_single = time() + plus_minus(86400 / $jrate, $jrvary);
my $next_group  = time() + plus_minus(86400 / $grate, $grvary);
while ((my $now = time()) < $done_when) {

    # Create jobs
    if ($next_single <= $next_group) {

        my $delta = $next_single - $now;
        $delta = 0 if $delta < 0;
        say "Waiting $delta secs for single job submit";
        sleep $delta;
        $next_single = $now + plus_minus(86400 / $jrate, $jrvary);

        my $pri = plus_minus(5, 85);    # 1-9
        my $t0 = [gettimeofday];
        my $cmd = qq{$MKJOB -q $queue -p $pri -- $script};
        system($cmd);
        my $td = sprintf("%.3f", tv_interval($t0));
        say "submitted a single job in $td sec";
    }
    else {
        my $delta = $next_group - $now;
        $delta = 0 if $delta < 0;
        say "Waiting $delta secs for group job submit";
        sleep $delta;
        $next_group = $now + plus_minus(86400 / $grate, $grvary);
        my $ng = plus_minus($gsize, $gsvary);
        my $gstring = join(",", (1..$ng));
        my $pri = plus_minus(5, 85);    # 1-9
        my $t0 = [gettimeofday];
        my $cmd = qq{$MKJOB -q $queue -p $pri -g $gstring  $script};
        system($cmd);
        my $ti = tv_interval($t0);
        my $td = sprintf("%.3f", $ti);
        my $av = sprintf("%.3f", $ti/$ng);
        say "...submitted a group job with $ng stations in $td sec (avg $av sec)";
    }
}

# Done
exit 0;

# Convert strings like 1w, 3d, 5h, 2m, 60s to seconds
sub to_secs {
    my $val = shift;
    return 0 unless $val =~ m{^\s*(\d+)([wdhms]?)$}i;
    my $sec = $1;
    my $unit = $2;
    $sec *= 60 if $unit eq 'm';
    $sec *= 60*60 if $unit eq 'h';
    $sec *= 60*60*24 if $unit eq 'd';
    $sec *= 60*60*24*7 if $unit eq 'w';
    return $sec;
}

sub plus_minus {
    my $num = shift;
    my $pct = shift;

    my $range = int(2 * $num * $pct / 100);
    return int($num + rand($range) - $range / 2);
}

sub be_the_script {

    # Show some of our environment
    say "My job environment:";
    my $nj = 0;
    foreach my $k (sort keys %ENV) {
        next unless $k =~ m/^JOB_/;
        say "  $k -> $ENV{$k}";
        ++$nj;
    }
    say "  $nj job-related envvars\n";

    # Pay attention to substatus
    my $ss = $ENV{JOB_SUBSTATUS} || q{};
    my $start = 1;
    if ($ss =~ m/^Step (\d+)/i) {
        say "Restarting after <$ss>";
        $start += $1 * 10;
    }

    # simulate doing something
    my $run_time = plus_minus($stime, $svary);
    say "Will run for $run_time secs (total all runs)";
    for my $i ($start .. $run_time) {
        say $i;
        say "## Step " . int($i / 10)
            if !($i % 10);
        sleep 1;
    }

    # What's our exit status?
    if (rand(100) < $srate) {
        say "Success!";
        exit 0;
    }
    elsif (rand(100) < $sfail) {
        say "I have a fatal failure; gotta die!";
        exit 99;
    }
    else {
        say "I got a retryable failure; I hope I'll run again later!";
        exit 11;
    }
}

__END__

=head1 NAME

job-pump - Pump in a bunch of batch jobs.  To load-test the job subsystem.

=head1 SYNOPSIS

 job-pump [options]

 Options:
  -h  --help          Usage summary
  -M  --nojobman      Don't start the jobman (perhaps you already have it running)
  -q  --queue         Queue to use, default is 'batch'
  -R  --root          Kit root.  Default is /
  -v  --verbose       Print more output

  -d  --duration      Test duration (how long to run).  Default is 3d (3 days).
                        Specify values like 60s, 12h, 2d, or 1w.
  -i  --initial       Pre-load this number of starter jobs before invoking jobman; default 100.
  -j  --jrate         Single job rate; rate of single jobs per day, default 1440 jobs/day
      --jrvary        Single job rate variation, in percent.  Default is +/- 10%.
  -g  --grate         Group job rate; rate of group job bundles per day; default is 5
  -G  --gsize         Group job size; number of child jobs in a group, default is 1000
      --grvary        Group rate variation, in percent.  Default is +/-10%
      --gsvary        Group size variation, in percent.  Default is +/-10%

  -s  --srate         Script non-retry rate, chance job will succeed on a try; default 90%
  -S  --sfail         Script fail-vs-retry rate, percent that fail; default is 20%
  -t  --stime         Script run time (implemented via sleep-ish code); default 60 seconds
  -T  --svary         Script run time variation, in percent.  Default is +/-80%

  -k  --script        Run instead as the script for the jobs we submit.
                          Makes us become the thing we run.  
                          Options -s, -S, -t and -T apply here too.

=head1 DESCRIPTION

Generates bunches of jobs to load-test the job subsystem.
More TBS...

Notes: 
  * Currently this tool does not add "future" jobs, although retries will
        cause that to happen anyway.
  * Only a single queue is used.
  * Job priority is not varied.
  * Job retry limit is default.



=cut

